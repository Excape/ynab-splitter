/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.excape.ynabclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.LocalDate;
/**
 * MonthSummary
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-06-06T11:46:19.985416+02:00[Europe/Zurich]")
public class MonthSummary {
  @JsonProperty("month")
  private LocalDate month = null;

  @JsonProperty("note")
  private String note = null;

  @JsonProperty("income")
  private Long income = null;

  @JsonProperty("budgeted")
  private Long budgeted = null;

  @JsonProperty("activity")
  private Long activity = null;

  @JsonProperty("to_be_budgeted")
  private Long toBeBudgeted = null;

  @JsonProperty("age_of_money")
  private Integer ageOfMoney = null;

  @JsonProperty("deleted")
  private Boolean deleted = null;

  public MonthSummary month(LocalDate month) {
    this.month = month;
    return this;
  }

   /**
   * Get month
   * @return month
  **/
  @Schema(required = true, description = "")
  public LocalDate getMonth() {
    return month;
  }

  public void setMonth(LocalDate month) {
    this.month = month;
  }

  public MonthSummary note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Get note
   * @return note
  **/
  @Schema(description = "")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public MonthSummary income(Long income) {
    this.income = income;
    return this;
  }

   /**
   * The total amount of transactions categorized to &#x27;Inflow: To be Budgeted&#x27; in the month
   * @return income
  **/
  @Schema(required = true, description = "The total amount of transactions categorized to 'Inflow: To be Budgeted' in the month")
  public Long getIncome() {
    return income;
  }

  public void setIncome(Long income) {
    this.income = income;
  }

  public MonthSummary budgeted(Long budgeted) {
    this.budgeted = budgeted;
    return this;
  }

   /**
   * The total amount budgeted in the month
   * @return budgeted
  **/
  @Schema(required = true, description = "The total amount budgeted in the month")
  public Long getBudgeted() {
    return budgeted;
  }

  public void setBudgeted(Long budgeted) {
    this.budgeted = budgeted;
  }

  public MonthSummary activity(Long activity) {
    this.activity = activity;
    return this;
  }

   /**
   * The total amount of transactions in the month, excluding those categorized to &#x27;Inflow: To be Budgeted&#x27;
   * @return activity
  **/
  @Schema(required = true, description = "The total amount of transactions in the month, excluding those categorized to 'Inflow: To be Budgeted'")
  public Long getActivity() {
    return activity;
  }

  public void setActivity(Long activity) {
    this.activity = activity;
  }

  public MonthSummary toBeBudgeted(Long toBeBudgeted) {
    this.toBeBudgeted = toBeBudgeted;
    return this;
  }

   /**
   * The available amount for &#x27;To be Budgeted&#x27;
   * @return toBeBudgeted
  **/
  @Schema(required = true, description = "The available amount for 'To be Budgeted'")
  public Long getToBeBudgeted() {
    return toBeBudgeted;
  }

  public void setToBeBudgeted(Long toBeBudgeted) {
    this.toBeBudgeted = toBeBudgeted;
  }

  public MonthSummary ageOfMoney(Integer ageOfMoney) {
    this.ageOfMoney = ageOfMoney;
    return this;
  }

   /**
   * The Age of Money as of the month
   * @return ageOfMoney
  **/
  @Schema(description = "The Age of Money as of the month")
  public Integer getAgeOfMoney() {
    return ageOfMoney;
  }

  public void setAgeOfMoney(Integer ageOfMoney) {
    this.ageOfMoney = ageOfMoney;
  }

  public MonthSummary deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
   * @return deleted
  **/
  @Schema(required = true, description = "Whether or not the month has been deleted.  Deleted months will only be included in delta requests.")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonthSummary monthSummary = (MonthSummary) o;
    return Objects.equals(this.month, monthSummary.month) &&
        Objects.equals(this.note, monthSummary.note) &&
        Objects.equals(this.income, monthSummary.income) &&
        Objects.equals(this.budgeted, monthSummary.budgeted) &&
        Objects.equals(this.activity, monthSummary.activity) &&
        Objects.equals(this.toBeBudgeted, monthSummary.toBeBudgeted) &&
        Objects.equals(this.ageOfMoney, monthSummary.ageOfMoney) &&
        Objects.equals(this.deleted, monthSummary.deleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(month, note, income, budgeted, activity, toBeBudgeted, ageOfMoney, deleted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonthSummary {\n");
    
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    income: ").append(toIndentedString(income)).append("\n");
    sb.append("    budgeted: ").append(toIndentedString(budgeted)).append("\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    toBeBudgeted: ").append(toIndentedString(toBeBudgeted)).append("\n");
    sb.append("    ageOfMoney: ").append(toIndentedString(ageOfMoney)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
