/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.excape.ynabclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.UUID;
import org.threeten.bp.LocalDate;
/**
 * TransactionSummary
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-09-07T14:51:52.476+02:00[Europe/Zurich]")
public class TransactionSummary {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("date")
  private LocalDate date = null;

  @JsonProperty("amount")
  private Long amount = null;

  @JsonProperty("memo")
  private String memo = null;

  /**
   * The cleared status of the transaction
   */
  public enum ClearedEnum {
    CLEARED("cleared"),
    UNCLEARED("uncleared"),
    RECONCILED("reconciled");

    private String value;

    ClearedEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ClearedEnum fromValue(String text) {
      for (ClearedEnum b : ClearedEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("cleared")
  private ClearedEnum cleared = null;

  @JsonProperty("approved")
  private Boolean approved = null;

  /**
   * The transaction flag
   */
  public enum FlagColorEnum {
    RED("red"),
    ORANGE("orange"),
    YELLOW("yellow"),
    GREEN("green"),
    BLUE("blue"),
    PURPLE("purple");

    private String value;

    FlagColorEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static FlagColorEnum fromValue(String text) {
      for (FlagColorEnum b : FlagColorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("flag_color")
  private FlagColorEnum flagColor = null;

  @JsonProperty("account_id")
  private UUID accountId = null;

  @JsonProperty("payee_id")
  private UUID payeeId = null;

  @JsonProperty("category_id")
  private UUID categoryId = null;

  @JsonProperty("transfer_account_id")
  private UUID transferAccountId = null;

  @JsonProperty("transfer_transaction_id")
  private String transferTransactionId = null;

  @JsonProperty("matched_transaction_id")
  private String matchedTransactionId = null;

  @JsonProperty("import_id")
  private String importId = null;

  @JsonProperty("deleted")
  private Boolean deleted = null;

  public TransactionSummary id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public TransactionSummary date(LocalDate date) {
    this.date = date;
    return this;
  }

   /**
   * The transaction date in ISO format (e.g. 2016-12-01)
   * @return date
  **/
  @Schema(required = true, description = "The transaction date in ISO format (e.g. 2016-12-01)")
  public LocalDate getDate() {
    return date;
  }

  public void setDate(LocalDate date) {
    this.date = date;
  }

  public TransactionSummary amount(Long amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The transaction amount in milliunits format
   * @return amount
  **/
  @Schema(required = true, description = "The transaction amount in milliunits format")
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }

  public TransactionSummary memo(String memo) {
    this.memo = memo;
    return this;
  }

   /**
   * Get memo
   * @return memo
  **/
  @Schema(description = "")
  public String getMemo() {
    return memo;
  }

  public void setMemo(String memo) {
    this.memo = memo;
  }

  public TransactionSummary cleared(ClearedEnum cleared) {
    this.cleared = cleared;
    return this;
  }

   /**
   * The cleared status of the transaction
   * @return cleared
  **/
  @Schema(required = true, description = "The cleared status of the transaction")
  public ClearedEnum getCleared() {
    return cleared;
  }

  public void setCleared(ClearedEnum cleared) {
    this.cleared = cleared;
  }

  public TransactionSummary approved(Boolean approved) {
    this.approved = approved;
    return this;
  }

   /**
   * Whether or not the transaction is approved
   * @return approved
  **/
  @Schema(required = true, description = "Whether or not the transaction is approved")
  public Boolean isApproved() {
    return approved;
  }

  public void setApproved(Boolean approved) {
    this.approved = approved;
  }

  public TransactionSummary flagColor(FlagColorEnum flagColor) {
    this.flagColor = flagColor;
    return this;
  }

   /**
   * The transaction flag
   * @return flagColor
  **/
  @Schema(description = "The transaction flag")
  public FlagColorEnum getFlagColor() {
    return flagColor;
  }

  public void setFlagColor(FlagColorEnum flagColor) {
    this.flagColor = flagColor;
  }

  public TransactionSummary accountId(UUID accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @Schema(required = true, description = "")
  public UUID getAccountId() {
    return accountId;
  }

  public void setAccountId(UUID accountId) {
    this.accountId = accountId;
  }

  public TransactionSummary payeeId(UUID payeeId) {
    this.payeeId = payeeId;
    return this;
  }

   /**
   * Get payeeId
   * @return payeeId
  **/
  @Schema(description = "")
  public UUID getPayeeId() {
    return payeeId;
  }

  public void setPayeeId(UUID payeeId) {
    this.payeeId = payeeId;
  }

  public TransactionSummary categoryId(UUID categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Get categoryId
   * @return categoryId
  **/
  @Schema(description = "")
  public UUID getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(UUID categoryId) {
    this.categoryId = categoryId;
  }

  public TransactionSummary transferAccountId(UUID transferAccountId) {
    this.transferAccountId = transferAccountId;
    return this;
  }

   /**
   * If a transfer transaction, the account to which it transfers
   * @return transferAccountId
  **/
  @Schema(description = "If a transfer transaction, the account to which it transfers")
  public UUID getTransferAccountId() {
    return transferAccountId;
  }

  public void setTransferAccountId(UUID transferAccountId) {
    this.transferAccountId = transferAccountId;
  }

  public TransactionSummary transferTransactionId(String transferTransactionId) {
    this.transferTransactionId = transferTransactionId;
    return this;
  }

   /**
   * If a transfer transaction, the id of transaction on the other side of the transfer
   * @return transferTransactionId
  **/
  @Schema(description = "If a transfer transaction, the id of transaction on the other side of the transfer")
  public String getTransferTransactionId() {
    return transferTransactionId;
  }

  public void setTransferTransactionId(String transferTransactionId) {
    this.transferTransactionId = transferTransactionId;
  }

  public TransactionSummary matchedTransactionId(String matchedTransactionId) {
    this.matchedTransactionId = matchedTransactionId;
    return this;
  }

   /**
   * If transaction is matched, the id of the matched transaction
   * @return matchedTransactionId
  **/
  @Schema(description = "If transaction is matched, the id of the matched transaction")
  public String getMatchedTransactionId() {
    return matchedTransactionId;
  }

  public void setMatchedTransactionId(String matchedTransactionId) {
    this.matchedTransactionId = matchedTransactionId;
  }

  public TransactionSummary importId(String importId) {
    this.importId = importId;
    return this;
  }

   /**
   * If the Transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: &#x27;YNAB:[milliunit_amount]:[iso_date]:[occurrence]&#x27;.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of &#x27;YNAB:-294230:2015-12-30:1&#x27;.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be &#x27;YNAB:-294230:2015-12-30:2&#x27;.
   * @return importId
  **/
  @Schema(description = "If the Transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.")
  public String getImportId() {
    return importId;
  }

  public void setImportId(String importId) {
    this.importId = importId;
  }

  public TransactionSummary deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
   * @return deleted
  **/
  @Schema(required = true, description = "Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionSummary transactionSummary = (TransactionSummary) o;
    return Objects.equals(this.id, transactionSummary.id) &&
        Objects.equals(this.date, transactionSummary.date) &&
        Objects.equals(this.amount, transactionSummary.amount) &&
        Objects.equals(this.memo, transactionSummary.memo) &&
        Objects.equals(this.cleared, transactionSummary.cleared) &&
        Objects.equals(this.approved, transactionSummary.approved) &&
        Objects.equals(this.flagColor, transactionSummary.flagColor) &&
        Objects.equals(this.accountId, transactionSummary.accountId) &&
        Objects.equals(this.payeeId, transactionSummary.payeeId) &&
        Objects.equals(this.categoryId, transactionSummary.categoryId) &&
        Objects.equals(this.transferAccountId, transactionSummary.transferAccountId) &&
        Objects.equals(this.transferTransactionId, transactionSummary.transferTransactionId) &&
        Objects.equals(this.matchedTransactionId, transactionSummary.matchedTransactionId) &&
        Objects.equals(this.importId, transactionSummary.importId) &&
        Objects.equals(this.deleted, transactionSummary.deleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, date, amount, memo, cleared, approved, flagColor, accountId, payeeId, categoryId, transferAccountId, transferTransactionId, matchedTransactionId, importId, deleted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionSummary {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    cleared: ").append(toIndentedString(cleared)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    flagColor: ").append(toIndentedString(flagColor)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    transferAccountId: ").append(toIndentedString(transferAccountId)).append("\n");
    sb.append("    transferTransactionId: ").append(toIndentedString(transferTransactionId)).append("\n");
    sb.append("    matchedTransactionId: ").append(toIndentedString(matchedTransactionId)).append("\n");
    sb.append("    importId: ").append(toIndentedString(importId)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
