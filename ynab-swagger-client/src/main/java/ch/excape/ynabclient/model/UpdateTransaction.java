/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.excape.ynabclient.model;

import java.util.Objects;
import java.util.Arrays;
import ch.excape.ynabclient.model.SaveTransaction;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.UUID;
import org.threeten.bp.LocalDate;
/**
 * UpdateTransaction
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-09-07T14:51:52.476+02:00[Europe/Zurich]")
public class UpdateTransaction extends SaveTransaction {
  @JsonProperty("account_id")
  private UUID accountId = null;

  @JsonProperty("date")
  private LocalDate date = null;

  @JsonProperty("amount")
  private Long amount = null;

  @JsonProperty("payee_id")
  private UUID payeeId = null;

  @JsonProperty("payee_name")
  private String payeeName = null;

  @JsonProperty("category_id")
  private UUID categoryId = null;

  @JsonProperty("memo")
  private String memo = null;

//  /**
//   * The cleared status of the transaction
//   */
//  public enum ClearedEnum {
//    CLEARED("cleared"),
//    UNCLEARED("uncleared"),
//    RECONCILED("reconciled");
//
//    private String value;
//
//    ClearedEnum(String value) {
//      this.value = value;
//    }
//    @JsonValue
//    public String getValue() {
//      return value;
//    }
//
//    @Override
//    public String toString() {
//      return String.valueOf(value);
//    }
//    @JsonCreator
//    public static ClearedEnum fromValue(String text) {
//      for (ClearedEnum b : ClearedEnum.values()) {
//        if (String.valueOf(b.value).equals(text)) {
//          return b;
//        }
//      }
//      return null;
//    }

//  }
  @JsonProperty("cleared")
  private ClearedEnum cleared = null;

  @JsonProperty("approved")
  private Boolean approved = null;

  /**
   * The transaction flag
   */
//  public enum FlagColorEnum {
//    RED("red"),
//    ORANGE("orange"),
//    YELLOW("yellow"),
//    GREEN("green"),
//    BLUE("blue"),
//    PURPLE("purple");
//
//    private String value;
//
//    FlagColorEnum(String value) {
//      this.value = value;
//    }
//    @JsonValue
//    public String getValue() {
//      return value;
//    }
//
//    @Override
//    public String toString() {
//      return String.valueOf(value);
//    }
//    @JsonCreator
//    public static FlagColorEnum fromValue(String text) {
//      for (FlagColorEnum b : FlagColorEnum.values()) {
//        if (String.valueOf(b.value).equals(text)) {
//          return b;
//        }
//      }
//      return null;
//    }
//  }
  @JsonProperty("flag_color")
  private FlagColorEnum flagColor = null;

  @JsonProperty("import_id")
  private String importId = null;

  public UpdateTransaction accountId(UUID accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @Schema(required = true, description = "")
  public UUID getAccountId() {
    return accountId;
  }

  public void setAccountId(UUID accountId) {
    this.accountId = accountId;
  }

  public UpdateTransaction date(LocalDate date) {
    this.date = date;
    return this;
  }

   /**
   * The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
   * @return date
  **/
  @Schema(required = true, description = "The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.")
  public LocalDate getDate() {
    return date;
  }

  public void setDate(LocalDate date) {
    this.date = date;
  }

  public UpdateTransaction amount(Long amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
   * @return amount
  **/
  @Schema(required = true, description = "The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.")
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }

  public UpdateTransaction payeeId(UUID payeeId) {
    this.payeeId = payeeId;
    return this;
  }

   /**
   * The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as tranfer_payee_id on the account resource.
   * @return payeeId
  **/
  @Schema(description = "The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as tranfer_payee_id on the account resource.")
  public UUID getPayeeId() {
    return payeeId;
  }

  public void setPayeeId(UUID payeeId) {
    this.payeeId = payeeId;
  }

  public UpdateTransaction payeeName(String payeeName) {
    this.payeeName = payeeName;
    return this;
  }

   /**
   * The payee name.  If a payee_name value is provided and payee_id has a null value, the payee_name value will be used to resolve the payee by either (1) a matching payee rename rule (only if import_id is also specified) or (2) a payee with the same name or (3) creation of a new payee.
   * @return payeeName
  **/
  @Schema(description = "The payee name.  If a payee_name value is provided and payee_id has a null value, the payee_name value will be used to resolve the payee by either (1) a matching payee rename rule (only if import_id is also specified) or (2) a payee with the same name or (3) creation of a new payee.")
  public String getPayeeName() {
    return payeeName;
  }

  public void setPayeeName(String payeeName) {
    this.payeeName = payeeName;
  }

  public UpdateTransaction categoryId(UUID categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * The category for the transaction.  Split and Credit Card Payment categories are not permitted and will be ignored if supplied.  If an existing transaction has a Split category it cannot be changed.
   * @return categoryId
  **/
  @Schema(description = "The category for the transaction.  Split and Credit Card Payment categories are not permitted and will be ignored if supplied.  If an existing transaction has a Split category it cannot be changed.")
  public UUID getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(UUID categoryId) {
    this.categoryId = categoryId;
  }

  public UpdateTransaction memo(String memo) {
    this.memo = memo;
    return this;
  }

   /**
   * Get memo
   * @return memo
  **/
  @Schema(description = "")
  public String getMemo() {
    return memo;
  }

  public void setMemo(String memo) {
    this.memo = memo;
  }

  public UpdateTransaction cleared(ClearedEnum cleared) {
    this.cleared = cleared;
    return this;
  }

   /**
   * The cleared status of the transaction
   * @return cleared
  **/
  @Schema(description = "The cleared status of the transaction")
  public ClearedEnum getCleared() {
    return cleared;
  }

  public void setCleared(ClearedEnum cleared) {
    this.cleared = cleared;
  }

  public UpdateTransaction approved(Boolean approved) {
    this.approved = approved;
    return this;
  }

   /**
   * Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
   * @return approved
  **/
  @Schema(description = "Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.")
  public Boolean isApproved() {
    return approved;
  }

  public void setApproved(Boolean approved) {
    this.approved = approved;
  }

  public UpdateTransaction flagColor(FlagColorEnum flagColor) {
    this.flagColor = flagColor;
    return this;
  }

   /**
   * The transaction flag
   * @return flagColor
  **/
  @Schema(description = "The transaction flag")
  public FlagColorEnum getFlagColor() {
    return flagColor;
  }

  public void setFlagColor(FlagColorEnum flagColor) {
    this.flagColor = flagColor;
  }

  public UpdateTransaction importId(String importId) {
    this.importId = importId;
    return this;
  }

   /**
   * If specified, the new transaction will be assigned this import_id and considered \&quot;imported\&quot;.  We will also attempt to match this imported transaction to an existing \&quot;user-entered\&quot; transation on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.&lt;br&gt;&lt;br&gt;Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: &#x27;YNAB:[milliunit_amount]:[iso_date]:[occurrence]&#x27;. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of &#x27;YNAB:-294230:2015-12-30:1&#x27;.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be &#x27;YNAB:-294230:2015-12-30:2&#x27;.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.&lt;br&gt;&lt;br&gt;If import_id is omitted or specified as null, the transaction will be treated as a \&quot;user-entered\&quot; transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
   * @return importId
  **/
  @Schema(description = "If specified, the new transaction will be assigned this import_id and considered \"imported\".  We will also attempt to match this imported transaction to an existing \"user-entered\" transation on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a \"user-entered\" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).")
  public String getImportId() {
    return importId;
  }

  public void setImportId(String importId) {
    this.importId = importId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateTransaction updateTransaction = (UpdateTransaction) o;
    return Objects.equals(this.accountId, updateTransaction.accountId) &&
        Objects.equals(this.date, updateTransaction.date) &&
        Objects.equals(this.amount, updateTransaction.amount) &&
        Objects.equals(this.payeeId, updateTransaction.payeeId) &&
        Objects.equals(this.payeeName, updateTransaction.payeeName) &&
        Objects.equals(this.categoryId, updateTransaction.categoryId) &&
        Objects.equals(this.memo, updateTransaction.memo) &&
        Objects.equals(this.cleared, updateTransaction.cleared) &&
        Objects.equals(this.approved, updateTransaction.approved) &&
        Objects.equals(this.flagColor, updateTransaction.flagColor) &&
        Objects.equals(this.importId, updateTransaction.importId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, date, amount, payeeId, payeeName, categoryId, memo, cleared, approved, flagColor, importId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateTransaction {\n");
    
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    payeeName: ").append(toIndentedString(payeeName)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    cleared: ").append(toIndentedString(cleared)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    flagColor: ").append(toIndentedString(flagColor)).append("\n");
    sb.append("    importId: ").append(toIndentedString(importId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
