/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.excape.ynabclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.UUID;
/**
 * SaveSubTransaction
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-06-06T11:46:19.985416+02:00[Europe/Zurich]")
public class SaveSubTransaction {
  @JsonProperty("amount")
  private Long amount = null;

  @JsonProperty("payee_id")
  private UUID payeeId = null;

  @JsonProperty("payee_name")
  private String payeeName = null;

  @JsonProperty("category_id")
  private UUID categoryId = null;

  @JsonProperty("memo")
  private String memo = null;

  public SaveSubTransaction amount(Long amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The subtransaction amount in milliunits format.
   * @return amount
  **/
  @Schema(required = true, description = "The subtransaction amount in milliunits format.")
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }

  public SaveSubTransaction payeeId(UUID payeeId) {
    this.payeeId = payeeId;
    return this;
  }

   /**
   * The payee for the subtransaction.
   * @return payeeId
  **/
  @Schema(description = "The payee for the subtransaction.")
  public UUID getPayeeId() {
    return payeeId;
  }

  public void setPayeeId(UUID payeeId) {
    this.payeeId = payeeId;
  }

  public SaveSubTransaction payeeName(String payeeName) {
    this.payeeName = payeeName;
    return this;
  }

   /**
   * The payee name.  If a &#x60;payee_name&#x60; value is provided and &#x60;payee_id&#x60; has a null value, the &#x60;payee_name&#x60; value will be used to resolve the payee by either (1) a matching payee rename rule (only if import_id is also specified on parent transaction) or (2) a payee with the same name or (3) creation of a new payee.
   * @return payeeName
  **/
  @Schema(description = "The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if import_id is also specified on parent transaction) or (2) a payee with the same name or (3) creation of a new payee.")
  public String getPayeeName() {
    return payeeName;
  }

  public void setPayeeName(String payeeName) {
    this.payeeName = payeeName;
  }

  public SaveSubTransaction categoryId(UUID categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * The category for the subtransaction.  Credit Card Payment categories are not permitted and will be ignored if supplied.
   * @return categoryId
  **/
  @Schema(description = "The category for the subtransaction.  Credit Card Payment categories are not permitted and will be ignored if supplied.")
  public UUID getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(UUID categoryId) {
    this.categoryId = categoryId;
  }

  public SaveSubTransaction memo(String memo) {
    this.memo = memo;
    return this;
  }

   /**
   * Get memo
   * @return memo
  **/
  @Schema(description = "")
  public String getMemo() {
    return memo;
  }

  public void setMemo(String memo) {
    this.memo = memo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaveSubTransaction saveSubTransaction = (SaveSubTransaction) o;
    return Objects.equals(this.amount, saveSubTransaction.amount) &&
        Objects.equals(this.payeeId, saveSubTransaction.payeeId) &&
        Objects.equals(this.payeeName, saveSubTransaction.payeeName) &&
        Objects.equals(this.categoryId, saveSubTransaction.categoryId) &&
        Objects.equals(this.memo, saveSubTransaction.memo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, payeeId, payeeName, categoryId, memo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaveSubTransaction {\n");
    
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    payeeName: ").append(toIndentedString(payeeName)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
