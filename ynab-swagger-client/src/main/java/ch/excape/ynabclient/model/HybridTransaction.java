/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.excape.ynabclient.model;

import java.util.Objects;
import java.util.Arrays;
import ch.excape.ynabclient.model.TransactionSummary;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.UUID;
import org.threeten.bp.LocalDate;
/**
 * HybridTransaction
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-09-07T14:51:52.476+02:00[Europe/Zurich]")
public class HybridTransaction extends TransactionSummary {
  /**
   * Whether the hybrid transaction represents a regular transaction or a subtransaction
   */
  public enum TypeEnum {
    TRANSACTION("transaction"),
    SUBTRANSACTION("subtransaction");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("parent_transaction_id")
  private String parentTransactionId = null;

  @JsonProperty("account_name")
  private String accountName = null;

  @JsonProperty("payee_name")
  private String payeeName = null;

  @JsonProperty("category_name")
  private String categoryName = null;

  public HybridTransaction type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Whether the hybrid transaction represents a regular transaction or a subtransaction
   * @return type
  **/
  @Schema(required = true, description = "Whether the hybrid transaction represents a regular transaction or a subtransaction")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public HybridTransaction parentTransactionId(String parentTransactionId) {
    this.parentTransactionId = parentTransactionId;
    return this;
  }

   /**
   * For subtransaction types, this is the id of the parent transaction.  For transaction types, this id will be always be null.
   * @return parentTransactionId
  **/
  @Schema(description = "For subtransaction types, this is the id of the parent transaction.  For transaction types, this id will be always be null.")
  public String getParentTransactionId() {
    return parentTransactionId;
  }

  public void setParentTransactionId(String parentTransactionId) {
    this.parentTransactionId = parentTransactionId;
  }

  public HybridTransaction accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

   /**
   * Get accountName
   * @return accountName
  **/
  @Schema(required = true, description = "")
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }

  public HybridTransaction payeeName(String payeeName) {
    this.payeeName = payeeName;
    return this;
  }

   /**
   * Get payeeName
   * @return payeeName
  **/
  @Schema(description = "")
  public String getPayeeName() {
    return payeeName;
  }

  public void setPayeeName(String payeeName) {
    this.payeeName = payeeName;
  }

  public HybridTransaction categoryName(String categoryName) {
    this.categoryName = categoryName;
    return this;
  }

   /**
   * Get categoryName
   * @return categoryName
  **/
  @Schema(description = "")
  public String getCategoryName() {
    return categoryName;
  }

  public void setCategoryName(String categoryName) {
    this.categoryName = categoryName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HybridTransaction hybridTransaction = (HybridTransaction) o;
    return Objects.equals(this.type, hybridTransaction.type) &&
        Objects.equals(this.parentTransactionId, hybridTransaction.parentTransactionId) &&
        Objects.equals(this.accountName, hybridTransaction.accountName) &&
        Objects.equals(this.payeeName, hybridTransaction.payeeName) &&
        Objects.equals(this.categoryName, hybridTransaction.categoryName) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, parentTransactionId, accountName, payeeName, categoryName, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HybridTransaction {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    parentTransactionId: ").append(toIndentedString(parentTransactionId)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    payeeName: ").append(toIndentedString(payeeName)).append("\n");
    sb.append("    categoryName: ").append(toIndentedString(categoryName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
