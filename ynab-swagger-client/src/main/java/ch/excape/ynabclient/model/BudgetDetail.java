/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.excape.ynabclient.model;

import java.util.Objects;
import java.util.Arrays;
import ch.excape.ynabclient.model.Account;
import ch.excape.ynabclient.model.BudgetSummary;
import ch.excape.ynabclient.model.Category;
import ch.excape.ynabclient.model.CategoryGroup;
import ch.excape.ynabclient.model.CurrencyFormat;
import ch.excape.ynabclient.model.DateFormat;
import ch.excape.ynabclient.model.MonthDetail;
import ch.excape.ynabclient.model.Payee;
import ch.excape.ynabclient.model.PayeeLocation;
import ch.excape.ynabclient.model.ScheduledSubTransaction;
import ch.excape.ynabclient.model.ScheduledTransactionSummary;
import ch.excape.ynabclient.model.SubTransaction;
import ch.excape.ynabclient.model.TransactionSummary;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
/**
 * BudgetDetail
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-09-07T14:51:52.476+02:00[Europe/Zurich]")
public class BudgetDetail extends BudgetSummary {
  @JsonProperty("accounts")
  private List<Account> accounts = null;

  @JsonProperty("payees")
  private List<Payee> payees = null;

  @JsonProperty("payee_locations")
  private List<PayeeLocation> payeeLocations = null;

  @JsonProperty("category_groups")
  private List<CategoryGroup> categoryGroups = null;

  @JsonProperty("categories")
  private List<Category> categories = null;

  @JsonProperty("months")
  private List<MonthDetail> months = null;

  @JsonProperty("transactions")
  private List<TransactionSummary> transactions = null;

  @JsonProperty("subtransactions")
  private List<SubTransaction> subtransactions = null;

  @JsonProperty("scheduled_transactions")
  private List<ScheduledTransactionSummary> scheduledTransactions = null;

  @JsonProperty("scheduled_subtransactions")
  private List<ScheduledSubTransaction> scheduledSubtransactions = null;

  public BudgetDetail accounts(List<Account> accounts) {
    this.accounts = accounts;
    return this;
  }

  public BudgetDetail addAccountsItem(Account accountsItem) {
    if (this.accounts == null) {
      this.accounts = new ArrayList<Account>();
    }
    this.accounts.add(accountsItem);
    return this;
  }

   /**
   * Get accounts
   * @return accounts
  **/
  @Schema(description = "")
  public List<Account> getAccounts() {
    return accounts;
  }

  public void setAccounts(List<Account> accounts) {
    this.accounts = accounts;
  }

  public BudgetDetail payees(List<Payee> payees) {
    this.payees = payees;
    return this;
  }

  public BudgetDetail addPayeesItem(Payee payeesItem) {
    if (this.payees == null) {
      this.payees = new ArrayList<Payee>();
    }
    this.payees.add(payeesItem);
    return this;
  }

   /**
   * Get payees
   * @return payees
  **/
  @Schema(description = "")
  public List<Payee> getPayees() {
    return payees;
  }

  public void setPayees(List<Payee> payees) {
    this.payees = payees;
  }

  public BudgetDetail payeeLocations(List<PayeeLocation> payeeLocations) {
    this.payeeLocations = payeeLocations;
    return this;
  }

  public BudgetDetail addPayeeLocationsItem(PayeeLocation payeeLocationsItem) {
    if (this.payeeLocations == null) {
      this.payeeLocations = new ArrayList<PayeeLocation>();
    }
    this.payeeLocations.add(payeeLocationsItem);
    return this;
  }

   /**
   * Get payeeLocations
   * @return payeeLocations
  **/
  @Schema(description = "")
  public List<PayeeLocation> getPayeeLocations() {
    return payeeLocations;
  }

  public void setPayeeLocations(List<PayeeLocation> payeeLocations) {
    this.payeeLocations = payeeLocations;
  }

  public BudgetDetail categoryGroups(List<CategoryGroup> categoryGroups) {
    this.categoryGroups = categoryGroups;
    return this;
  }

  public BudgetDetail addCategoryGroupsItem(CategoryGroup categoryGroupsItem) {
    if (this.categoryGroups == null) {
      this.categoryGroups = new ArrayList<CategoryGroup>();
    }
    this.categoryGroups.add(categoryGroupsItem);
    return this;
  }

   /**
   * Get categoryGroups
   * @return categoryGroups
  **/
  @Schema(description = "")
  public List<CategoryGroup> getCategoryGroups() {
    return categoryGroups;
  }

  public void setCategoryGroups(List<CategoryGroup> categoryGroups) {
    this.categoryGroups = categoryGroups;
  }

  public BudgetDetail categories(List<Category> categories) {
    this.categories = categories;
    return this;
  }

  public BudgetDetail addCategoriesItem(Category categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<Category>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @Schema(description = "")
  public List<Category> getCategories() {
    return categories;
  }

  public void setCategories(List<Category> categories) {
    this.categories = categories;
  }

  public BudgetDetail months(List<MonthDetail> months) {
    this.months = months;
    return this;
  }

  public BudgetDetail addMonthsItem(MonthDetail monthsItem) {
    if (this.months == null) {
      this.months = new ArrayList<MonthDetail>();
    }
    this.months.add(monthsItem);
    return this;
  }

   /**
   * Get months
   * @return months
  **/
  @Schema(description = "")
  public List<MonthDetail> getMonths() {
    return months;
  }

  public void setMonths(List<MonthDetail> months) {
    this.months = months;
  }

  public BudgetDetail transactions(List<TransactionSummary> transactions) {
    this.transactions = transactions;
    return this;
  }

  public BudgetDetail addTransactionsItem(TransactionSummary transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<TransactionSummary>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Get transactions
   * @return transactions
  **/
  @Schema(description = "")
  public List<TransactionSummary> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<TransactionSummary> transactions) {
    this.transactions = transactions;
  }

  public BudgetDetail subtransactions(List<SubTransaction> subtransactions) {
    this.subtransactions = subtransactions;
    return this;
  }

  public BudgetDetail addSubtransactionsItem(SubTransaction subtransactionsItem) {
    if (this.subtransactions == null) {
      this.subtransactions = new ArrayList<SubTransaction>();
    }
    this.subtransactions.add(subtransactionsItem);
    return this;
  }

   /**
   * Get subtransactions
   * @return subtransactions
  **/
  @Schema(description = "")
  public List<SubTransaction> getSubtransactions() {
    return subtransactions;
  }

  public void setSubtransactions(List<SubTransaction> subtransactions) {
    this.subtransactions = subtransactions;
  }

  public BudgetDetail scheduledTransactions(List<ScheduledTransactionSummary> scheduledTransactions) {
    this.scheduledTransactions = scheduledTransactions;
    return this;
  }

  public BudgetDetail addScheduledTransactionsItem(ScheduledTransactionSummary scheduledTransactionsItem) {
    if (this.scheduledTransactions == null) {
      this.scheduledTransactions = new ArrayList<ScheduledTransactionSummary>();
    }
    this.scheduledTransactions.add(scheduledTransactionsItem);
    return this;
  }

   /**
   * Get scheduledTransactions
   * @return scheduledTransactions
  **/
  @Schema(description = "")
  public List<ScheduledTransactionSummary> getScheduledTransactions() {
    return scheduledTransactions;
  }

  public void setScheduledTransactions(List<ScheduledTransactionSummary> scheduledTransactions) {
    this.scheduledTransactions = scheduledTransactions;
  }

  public BudgetDetail scheduledSubtransactions(List<ScheduledSubTransaction> scheduledSubtransactions) {
    this.scheduledSubtransactions = scheduledSubtransactions;
    return this;
  }

  public BudgetDetail addScheduledSubtransactionsItem(ScheduledSubTransaction scheduledSubtransactionsItem) {
    if (this.scheduledSubtransactions == null) {
      this.scheduledSubtransactions = new ArrayList<ScheduledSubTransaction>();
    }
    this.scheduledSubtransactions.add(scheduledSubtransactionsItem);
    return this;
  }

   /**
   * Get scheduledSubtransactions
   * @return scheduledSubtransactions
  **/
  @Schema(description = "")
  public List<ScheduledSubTransaction> getScheduledSubtransactions() {
    return scheduledSubtransactions;
  }

  public void setScheduledSubtransactions(List<ScheduledSubTransaction> scheduledSubtransactions) {
    this.scheduledSubtransactions = scheduledSubtransactions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetDetail budgetDetail = (BudgetDetail) o;
    return Objects.equals(this.accounts, budgetDetail.accounts) &&
        Objects.equals(this.payees, budgetDetail.payees) &&
        Objects.equals(this.payeeLocations, budgetDetail.payeeLocations) &&
        Objects.equals(this.categoryGroups, budgetDetail.categoryGroups) &&
        Objects.equals(this.categories, budgetDetail.categories) &&
        Objects.equals(this.months, budgetDetail.months) &&
        Objects.equals(this.transactions, budgetDetail.transactions) &&
        Objects.equals(this.subtransactions, budgetDetail.subtransactions) &&
        Objects.equals(this.scheduledTransactions, budgetDetail.scheduledTransactions) &&
        Objects.equals(this.scheduledSubtransactions, budgetDetail.scheduledSubtransactions) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accounts, payees, payeeLocations, categoryGroups, categories, months, transactions, subtransactions, scheduledTransactions, scheduledSubtransactions, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetDetail {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    payees: ").append(toIndentedString(payees)).append("\n");
    sb.append("    payeeLocations: ").append(toIndentedString(payeeLocations)).append("\n");
    sb.append("    categoryGroups: ").append(toIndentedString(categoryGroups)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    months: ").append(toIndentedString(months)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    subtransactions: ").append(toIndentedString(subtransactions)).append("\n");
    sb.append("    scheduledTransactions: ").append(toIndentedString(scheduledTransactions)).append("\n");
    sb.append("    scheduledSubtransactions: ").append(toIndentedString(scheduledSubtransactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
