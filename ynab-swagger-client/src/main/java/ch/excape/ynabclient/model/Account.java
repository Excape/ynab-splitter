/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.excape.ynabclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.UUID;
/**
 * Account
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-09-07T14:51:52.476+02:00[Europe/Zurich]")
public class Account {
  @JsonProperty("id")
  private UUID id = null;

  @JsonProperty("name")
  private String name = null;

  /**
   * The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future.
   */
  public enum TypeEnum {
    CHECKING("checking"),
    SAVINGS("savings"),
    CASH("cash"),
    CREDITCARD("creditCard"),
    LINEOFCREDIT("lineOfCredit"),
    OTHERASSET("otherAsset"),
    OTHERLIABILITY("otherLiability"),
    PAYPAL("payPal"),
    MERCHANTACCOUNT("merchantAccount"),
    INVESTMENTACCOUNT("investmentAccount"),
    MORTGAGE("mortgage");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("on_budget")
  private Boolean onBudget = null;

  @JsonProperty("closed")
  private Boolean closed = null;

  @JsonProperty("note")
  private String note = null;

  @JsonProperty("balance")
  private Long balance = null;

  @JsonProperty("cleared_balance")
  private Long clearedBalance = null;

  @JsonProperty("uncleared_balance")
  private Long unclearedBalance = null;

  @JsonProperty("transfer_payee_id")
  private UUID transferPayeeId = null;

  @JsonProperty("deleted")
  private Boolean deleted = null;

  public Account id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public Account name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Account type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future.
   * @return type
  **/
  @Schema(required = true, description = "The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Account onBudget(Boolean onBudget) {
    this.onBudget = onBudget;
    return this;
  }

   /**
   * Whether this account is on budget or not
   * @return onBudget
  **/
  @Schema(required = true, description = "Whether this account is on budget or not")
  public Boolean isOnBudget() {
    return onBudget;
  }

  public void setOnBudget(Boolean onBudget) {
    this.onBudget = onBudget;
  }

  public Account closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

   /**
   * Whether this account is closed or not
   * @return closed
  **/
  @Schema(required = true, description = "Whether this account is closed or not")
  public Boolean isClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }

  public Account note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Get note
   * @return note
  **/
  @Schema(description = "")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public Account balance(Long balance) {
    this.balance = balance;
    return this;
  }

   /**
   * The current balance of the account in milliunits format
   * @return balance
  **/
  @Schema(required = true, description = "The current balance of the account in milliunits format")
  public Long getBalance() {
    return balance;
  }

  public void setBalance(Long balance) {
    this.balance = balance;
  }

  public Account clearedBalance(Long clearedBalance) {
    this.clearedBalance = clearedBalance;
    return this;
  }

   /**
   * The current cleared balance of the account in milliunits format
   * @return clearedBalance
  **/
  @Schema(required = true, description = "The current cleared balance of the account in milliunits format")
  public Long getClearedBalance() {
    return clearedBalance;
  }

  public void setClearedBalance(Long clearedBalance) {
    this.clearedBalance = clearedBalance;
  }

  public Account unclearedBalance(Long unclearedBalance) {
    this.unclearedBalance = unclearedBalance;
    return this;
  }

   /**
   * The current uncleared balance of the account in milliunits format
   * @return unclearedBalance
  **/
  @Schema(required = true, description = "The current uncleared balance of the account in milliunits format")
  public Long getUnclearedBalance() {
    return unclearedBalance;
  }

  public void setUnclearedBalance(Long unclearedBalance) {
    this.unclearedBalance = unclearedBalance;
  }

  public Account transferPayeeId(UUID transferPayeeId) {
    this.transferPayeeId = transferPayeeId;
    return this;
  }

   /**
   * The payee id which should be used when transferring to this account
   * @return transferPayeeId
  **/
  @Schema(required = true, description = "The payee id which should be used when transferring to this account")
  public UUID getTransferPayeeId() {
    return transferPayeeId;
  }

  public void setTransferPayeeId(UUID transferPayeeId) {
    this.transferPayeeId = transferPayeeId;
  }

  public Account deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.
   * @return deleted
  **/
  @Schema(required = true, description = "Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.id, account.id) &&
        Objects.equals(this.name, account.name) &&
        Objects.equals(this.type, account.type) &&
        Objects.equals(this.onBudget, account.onBudget) &&
        Objects.equals(this.closed, account.closed) &&
        Objects.equals(this.note, account.note) &&
        Objects.equals(this.balance, account.balance) &&
        Objects.equals(this.clearedBalance, account.clearedBalance) &&
        Objects.equals(this.unclearedBalance, account.unclearedBalance) &&
        Objects.equals(this.transferPayeeId, account.transferPayeeId) &&
        Objects.equals(this.deleted, account.deleted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, onBudget, closed, note, balance, clearedBalance, unclearedBalance, transferPayeeId, deleted);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    onBudget: ").append(toIndentedString(onBudget)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    clearedBalance: ").append(toIndentedString(clearedBalance)).append("\n");
    sb.append("    unclearedBalance: ").append(toIndentedString(unclearedBalance)).append("\n");
    sb.append("    transferPayeeId: ").append(toIndentedString(transferPayeeId)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
