/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.excape.ynabclient.api;

import ch.excape.ynabclient.model.ErrorResponse;
import ch.excape.ynabclient.model.HybridTransactionsResponse;
import org.threeten.bp.LocalDate;
import ch.excape.ynabclient.model.SaveTransactionWrapper;
import ch.excape.ynabclient.model.SaveTransactionsResponse;
import ch.excape.ynabclient.model.SaveTransactionsWrapper;
import ch.excape.ynabclient.model.TransactionResponse;
import ch.excape.ynabclient.model.TransactionsResponse;
import ch.excape.ynabclient.model.UpdateTransactionsWrapper;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Ignore
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    /**
     * Create a single transaction or multiple transactions
     *
     * Creates a single transaction or multiple transactions.  If you provide a body containing a &#x27;transaction&#x27; object, a single transaction will be created and if you provide a body containing a &#x27;transactions&#x27; array, multiple transactions will be created.  Scheduled transactions cannot be created on this endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTransactionTest() {
        SaveTransactionsWrapper body = null;
        String budgetId = null;
        SaveTransactionsResponse response = api.createTransaction(body, budgetId);

        // TODO: test validations
    }
    /**
     * Single transaction
     *
     * Returns a single transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionByIdTest() {
        String budgetId = null;
        String transactionId = null;
        TransactionResponse response = api.getTransactionById(budgetId, transactionId);

        // TODO: test validations
    }
    /**
     * List transactions
     *
     * Returns budget transactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsTest() {
        String budgetId = null;
        LocalDate sinceDate = null;
        String type = null;
        Long lastKnowledgeOfServer = null;
        TransactionsResponse response = api.getTransactions(budgetId, sinceDate, type, lastKnowledgeOfServer);

        // TODO: test validations
    }
    /**
     * List account transactions
     *
     * Returns all transactions for a specified account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsByAccountTest() {
        String budgetId = null;
        String accountId = null;
        LocalDate sinceDate = null;
        String type = null;
        Long lastKnowledgeOfServer = null;
        TransactionsResponse response = api.getTransactionsByAccount(budgetId, accountId, sinceDate, type, lastKnowledgeOfServer);

        // TODO: test validations
    }
    /**
     * List category transactions
     *
     * Returns all transactions for a specified category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsByCategoryTest() {
        String budgetId = null;
        String categoryId = null;
        LocalDate sinceDate = null;
        String type = null;
        Long lastKnowledgeOfServer = null;
        HybridTransactionsResponse response = api.getTransactionsByCategory(budgetId, categoryId, sinceDate, type, lastKnowledgeOfServer);

        // TODO: test validations
    }
    /**
     * List payee transactions
     *
     * Returns all transactions for a specified payee
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsByPayeeTest() {
        String budgetId = null;
        String payeeId = null;
        LocalDate sinceDate = null;
        String type = null;
        Long lastKnowledgeOfServer = null;
        HybridTransactionsResponse response = api.getTransactionsByPayee(budgetId, payeeId, sinceDate, type, lastKnowledgeOfServer);

        // TODO: test validations
    }
    /**
     * Updates an existing transaction
     *
     * Updates a transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTransactionTest() {
        SaveTransactionWrapper body = null;
        String budgetId = null;
        String transactionId = null;
        TransactionResponse response = api.updateTransaction(body, budgetId, transactionId);

        // TODO: test validations
    }
    /**
     * Update multiple transactions
     *
     * Updates multiple transactions, by &#x27;id&#x27; or &#x27;import_id&#x27;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTransactionsTest() {
        UpdateTransactionsWrapper body = null;
        String budgetId = null;
        SaveTransactionsResponse response = api.updateTransactions(body, budgetId);

        // TODO: test validations
    }
}
